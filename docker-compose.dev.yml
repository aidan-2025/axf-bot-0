version: '3.8'

# Development-specific Docker Compose configuration
# This file is optimized for local development with hot reloading and debugging

services:
  # Application 1: Strategy Generator (Development)
  app1:
    build:
      context: ./app1
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/axf_bot_db
      - REDIS_URL=redis://redis:6379/0
      - INFLUXDB_URL=http://influxdb:8086
      - APP1_PORT=8000
      - DEBUG=True
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    volumes:
      - ./app1:/app
      - ./app1/data:/app/data
      - ./app1/models:/app/models
      - ./app1/logs:/app/logs
    networks:
      - axf-bot-network
    command: ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Application 2: MT4 EA Generator (Development)
  app2:
    build:
      context: ./app2
      dockerfile: Dockerfile
      target: development
    ports:
      - "8001:8001"
      - "5679:5679"  # Debug port
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/axf_bot_db
      - APP2_PORT=8001
      - DEBUG=True
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./app2:/app
      - ./app2/generated:/app/generated
      - ./app2/backtesting:/app/backtesting
      - ./app2/logs:/app/logs
    networks:
      - axf-bot-network
    command: ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web UI (Development)
  web-ui:
    build:
      context: ./web-ui
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_APP1_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP2_API_URL=http://localhost:8001
      - NODE_ENV=development
    depends_on:
      app1:
        condition: service_healthy
      app2:
        condition: service_healthy
    volumes:
      - ./web-ui:/app
      - /app/node_modules
      - /app/.next
    networks:
      - axf-bot-network
    command: ["npm", "run", "dev"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=axf_bot_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - axf-bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d axf_bot_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - axf-bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # InfluxDB for Time Series Data
  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=axf-bot
      - DOCKER_INFLUXDB_INIT_BUCKET=forex_data
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - axf-bot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@axf-bot.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - axf-bot-network

  # Redis Admin (RedisInsight)
  redis-admin:
    image: redislabs/redisinsight:latest
    ports:
      - "8002:8001"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - axf-bot-network

volumes:
  postgres_data:
  redis_data:
  influxdb_data:

networks:
  axf-bot-network:
    driver: bridge
