name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Lint and format check
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r app1/requirements.txt
        pip install -r app2/requirements.txt
        pip install flake8 black mypy pytest
    
    - name: Install Node.js dependencies
      run: |
        cd web-ui
        npm ci
    
    - name: Lint Python code
      run: |
        flake8 app1/ app2/ --max-line-length=100 --ignore=E203,W503
        black --check app1/ app2/
        mypy app1/ app2/ --ignore-missing-imports
    
    - name: Lint TypeScript/JavaScript code
      run: |
        cd web-ui
        npm run lint
        npm run type-check

  # Test Python applications
  test-python:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: axf_bot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r app1/requirements.txt
        pip install -r app2/requirements.txt
    
    - name: Test App1
      run: |
        cd app1
        python -m pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Test App2
      run: |
        cd app2
        python -m pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./app1/coverage.xml,./app2/coverage.xml

  # Test Web UI
  test-web-ui:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: |
        cd web-ui
        npm ci
    
    - name: Run tests
      run: |
        cd web-ui
        npm test -- --coverage --watchAll=false
    
    - name: Build application
      run: |
        cd web-ui
        npm run build

  # Security scan
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r app1/ app2/ -f json -o bandit-report.json
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Docker build test
  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build App1 Docker image
      run: |
        cd app1
        docker build -t axf-bot-app1:test .
    
    - name: Build App2 Docker image
      run: |
        cd app2
        docker build -t axf-bot-app2:test .
    
    - name: Build Web UI Docker image
      run: |
        cd web-ui
        docker build -t axf-bot-web-ui:test .
    
    - name: Test Docker Compose
      run: |
        docker-compose config
        docker-compose build

  # Integration tests
  integration:
    runs-on: ubuntu-latest
    needs: [lint, test-python, test-web-ui]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: axf_bot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r app1/requirements.txt
        pip install -r app2/requirements.txt
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/axf_bot_test
        REDIS_URL: redis://localhost:6379/0
